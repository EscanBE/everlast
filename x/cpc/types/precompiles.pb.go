// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: everlast/cpc/v1/precompiles.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CustomPrecompiledContractMeta is metadata of the custom precompiled contract.
// It is used to define the custom precompiled contract and its metadata.
type CustomPrecompiledContractMeta struct {
	// address is the address of the precompiled contract.
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// custom_precompiled_type presents the type of the precompiled contract, eg: erc20, staking,...
	CustomPrecompiledType uint32 `protobuf:"varint,2,opt,name=custom_precompiled_type,json=customPrecompiledType,proto3" json:"custom_precompiled_type,omitempty"`
	// name of the precompiled contract.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// typed_meta is the json-encoded metadata of the precompiled contract, type-based.
	TypedMeta string `protobuf:"bytes,4,opt,name=typed_meta,json=typedMeta,proto3" json:"typed_meta,omitempty"`
	// disabled is the flag to disable the precompiled contract.
	Disabled bool `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (m *CustomPrecompiledContractMeta) Reset()         { *m = CustomPrecompiledContractMeta{} }
func (m *CustomPrecompiledContractMeta) String() string { return proto.CompactTextString(m) }
func (*CustomPrecompiledContractMeta) ProtoMessage()    {}
func (*CustomPrecompiledContractMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_57e71d416f415caa, []int{0}
}
func (m *CustomPrecompiledContractMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomPrecompiledContractMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomPrecompiledContractMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomPrecompiledContractMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomPrecompiledContractMeta.Merge(m, src)
}
func (m *CustomPrecompiledContractMeta) XXX_Size() int {
	return m.Size()
}
func (m *CustomPrecompiledContractMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomPrecompiledContractMeta.DiscardUnknown(m)
}

var xxx_messageInfo_CustomPrecompiledContractMeta proto.InternalMessageInfo

func (m *CustomPrecompiledContractMeta) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *CustomPrecompiledContractMeta) GetCustomPrecompiledType() uint32 {
	if m != nil {
		return m.CustomPrecompiledType
	}
	return 0
}

func (m *CustomPrecompiledContractMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustomPrecompiledContractMeta) GetTypedMeta() string {
	if m != nil {
		return m.TypedMeta
	}
	return ""
}

func (m *CustomPrecompiledContractMeta) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func init() {
	proto.RegisterType((*CustomPrecompiledContractMeta)(nil), "everlast.cpc.v1.CustomPrecompiledContractMeta")
}

func init() { proto.RegisterFile("everlast/cpc/v1/precompiles.proto", fileDescriptor_57e71d416f415caa) }

var fileDescriptor_57e71d416f415caa = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0xcf, 0x4a, 0xc3, 0x30,
	0x1c, 0x5e, 0x74, 0xea, 0x16, 0x14, 0x21, 0x28, 0x86, 0xc1, 0x42, 0xf5, 0x54, 0x10, 0x1a, 0xa6,
	0xe0, 0x03, 0x6c, 0xec, 0x28, 0x48, 0xf1, 0xe4, 0xa5, 0xa4, 0xc9, 0x8f, 0x5a, 0x68, 0x9b, 0xd0,
	0x64, 0xc5, 0xbd, 0x85, 0x8f, 0xe4, 0xd1, 0xe3, 0x8e, 0x1e, 0xa5, 0x7d, 0x11, 0x69, 0x64, 0x15,
	0xbc, 0xfd, 0xbe, 0x7c, 0xff, 0xc2, 0x87, 0xaf, 0xa1, 0x81, 0xba, 0x10, 0xd6, 0x71, 0x69, 0x24,
	0x6f, 0x16, 0xdc, 0xd4, 0x20, 0x75, 0x69, 0xf2, 0x02, 0x6c, 0x64, 0x6a, 0xed, 0x34, 0x39, 0xdf,
	0x4b, 0x22, 0x69, 0x64, 0xd4, 0x2c, 0x66, 0x17, 0x99, 0xce, 0xb4, 0xe7, 0x78, 0x7f, 0xfd, 0xca,
	0x6e, 0x3e, 0x10, 0x9e, 0xaf, 0x36, 0xd6, 0xe9, 0xf2, 0x69, 0x88, 0x50, 0x2b, 0x5d, 0xb9, 0x5a,
	0x48, 0xf7, 0x08, 0x4e, 0x10, 0x8a, 0x4f, 0x84, 0x52, 0x35, 0x58, 0x4b, 0x51, 0x80, 0xc2, 0xd3,
	0x78, 0x0f, 0xc9, 0x03, 0xbe, 0x92, 0xde, 0x9a, 0xfc, 0xd5, 0xab, 0xc4, 0x6d, 0x0d, 0xd0, 0x83,
	0x00, 0x85, 0x67, 0xf1, 0xa5, 0xfc, 0x9f, 0xfc, 0xbc, 0x35, 0x40, 0x08, 0x1e, 0x57, 0xa2, 0x04,
	0x7a, 0x18, 0xa0, 0x70, 0x1a, 0xfb, 0x9b, 0xcc, 0x31, 0xee, 0x8d, 0x2a, 0x29, 0xc1, 0x09, 0x3a,
	0xf6, 0xcc, 0xd4, 0xbf, 0xf8, 0x4f, 0xcc, 0xf0, 0x44, 0xe5, 0x56, 0xa4, 0x05, 0x28, 0x7a, 0x14,
	0xa0, 0x70, 0x12, 0x0f, 0x78, 0xb9, 0xfe, 0x6c, 0x19, 0xda, 0xb5, 0x0c, 0x7d, 0xb7, 0x0c, 0xbd,
	0x77, 0x6c, 0xb4, 0xeb, 0xd8, 0xe8, 0xab, 0x63, 0xa3, 0x97, 0xdb, 0x2c, 0x77, 0xaf, 0x9b, 0x34,
	0x92, 0xba, 0xe4, 0x6b, 0x2b, 0x45, 0xb5, 0x5c, 0xf3, 0x61, 0xb9, 0x66, 0x71, 0xc7, 0xdf, 0xfc,
	0x7e, 0x7d, 0x8d, 0x4d, 0x8f, 0xfd, 0x20, 0xf7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x31, 0xe0,
	0x81, 0x72, 0x5c, 0x01, 0x00, 0x00,
}

func (m *CustomPrecompiledContractMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomPrecompiledContractMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomPrecompiledContractMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.TypedMeta) > 0 {
		i -= len(m.TypedMeta)
		copy(dAtA[i:], m.TypedMeta)
		i = encodeVarintPrecompiles(dAtA, i, uint64(len(m.TypedMeta)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPrecompiles(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CustomPrecompiledType != 0 {
		i = encodeVarintPrecompiles(dAtA, i, uint64(m.CustomPrecompiledType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPrecompiles(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrecompiles(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrecompiles(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CustomPrecompiledContractMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPrecompiles(uint64(l))
	}
	if m.CustomPrecompiledType != 0 {
		n += 1 + sovPrecompiles(uint64(m.CustomPrecompiledType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPrecompiles(uint64(l))
	}
	l = len(m.TypedMeta)
	if l > 0 {
		n += 1 + l + sovPrecompiles(uint64(l))
	}
	if m.Disabled {
		n += 2
	}
	return n
}

func sovPrecompiles(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrecompiles(x uint64) (n int) {
	return sovPrecompiles(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CustomPrecompiledContractMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrecompiles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomPrecompiledContractMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomPrecompiledContractMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrecompiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrecompiles
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrecompiles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomPrecompiledType", wireType)
			}
			m.CustomPrecompiledType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrecompiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomPrecompiledType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrecompiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrecompiles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrecompiles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypedMeta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrecompiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrecompiles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrecompiles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypedMeta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrecompiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPrecompiles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrecompiles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrecompiles(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrecompiles
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrecompiles
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrecompiles
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrecompiles
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrecompiles
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrecompiles
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrecompiles        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrecompiles          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrecompiles = fmt.Errorf("proto: unexpected end of group")
)
